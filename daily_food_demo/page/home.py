import os

import matplotlib.pyplot as plt
import streamlit as st
from streamlit_option_menu import option_menu
import pickle
import pandas as pd

# =============================
# Load model
# =============================
BASE_DIR = os.path.dirname(os.path.dirname(__file__))   # th∆∞ m·ª•c daily_food_demo
MODEL_PATH = os.path.join(BASE_DIR, "model.pkl")

with open(MODEL_PATH, "rb") as f:
    model = pickle.load(f)

# =============================
# C·∫•u h√¨nh page
# =============================
st.set_page_config(
    page_title="Food Nutrition Demo",
    page_icon="ü•ó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================
# Sidebar (menu)
# =============================
with st.sidebar:
    selected = option_menu(
        "Menu",                               # Ti√™u ƒë·ªÅ menu
        ["Trang ch·ªß", "Nh·∫≠p d·ªØ li·ªáu", "K·∫øt qu·∫£"],     # C√°c trang
        icons=['house', 'cloud-upload', 'bar-chart'],# Icon cho t·ª´ng m·ª•c
        menu_icon="menu-app",                                # Icon c·ªßa menu ch√≠nh
        default_index=0,                              # M·∫∑c ƒë·ªãnh m·ªü trang ƒë·∫ßu ti√™n
    )

# =============================
# Header
# =============================
st.markdown("""
    <style>
    .header {
        background-color: #4CAF50;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        color: white;
        font-size: 24px;
        font-weight: bold;
    }
    .footer {
        margin-top: 50px;
        padding: 10px;
        text-align: center;
        color: gray;
        font-size: 14px;
        border-top: 1px solid #ddd;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown('<div class="header">ü•ó Food Nutrition ML Demo</div>', unsafe_allow_html=True)

# =============================
# N·ªôi dung ch√≠nh theo menu
# =============================
if selected == "Trang ch·ªß":
    st.subheader("Gi·ªõi thi·ªáu")
    st.write("""
    ƒê√¢y l√† demo ·ª©ng d·ª•ng Machine Learning d·ª± ƒëo√°n m·ª©c nƒÉng l∆∞·ª£ng t·ª´ d·ªØ li·ªáu dinh d∆∞·ª°ng.  
    B·∫°n c√≥ th·ªÉ nh·∫≠p c√°c th√¥ng s·ªë v·ªÅ Protein, Carbohydrates, Fat c√πng c√°c th√¥ng tin li√™n quan ƒë·ªÉ xem k·∫øt qu·∫£ ph√¢n lo·∫°i.
    """)

elif selected == "Nh·∫≠p d·ªØ li·ªáu":
    st.subheader("üì• Nh·∫≠p th√¥ng tin m√≥n ƒÉn")

    # Input s·ªë (v·ªõi ng∆∞·ª°ng h·ª£p l√Ω)
    calories = st.number_input("Calories (kcal)", min_value=0.0, max_value=1000.0, value=100.0, step=1.0)
    protein = st.number_input("Protein (g)", min_value=0.0, max_value=100.0, value=10.0, step=0.5)
    carbs = st.number_input("Carbohydrates (g)", min_value=0.0, max_value=200.0, value=30.0, step=0.5)
    fat = st.number_input("Fat (g)", min_value=0.0, max_value=100.0, value=5.0, step=0.5)
    fiber = st.number_input("Fiber (g)", min_value=0.0, max_value=50.0, value=5.0, step=0.5)
    sugars = st.number_input("Sugars (g)", min_value=0.0, max_value=100.0, value=10.0, step=0.5)
    sodium = st.number_input("Sodium (mg)", min_value=0.0, max_value=5000.0, value=300.0, step=10.0)

    # Button x√°c nh·∫≠n
    if st.button("üîç Ph√¢n t√≠ch d·ªØ li·ªáu"):
        st.session_state["input_data"] = {
            "Calories (kcal)": calories,
            "Protein (g)": protein,
            "Carbohydrates (g)": carbs,
            "Fat (g)": fat,
            "Fiber (g)": fiber,
            "Sugars (g)": sugars,
            "Sodium (mg)": sodium
        }
        st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n! Chuy·ªÉn sang tab **K·∫øt qu·∫£** ƒë·ªÉ xem.")

elif selected == "K·∫øt qu·∫£":
    st.subheader("üìä K·∫øt qu·∫£ ph√¢n t√≠ch")

    if "input_data" not in st.session_state:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p d·ªØ li·ªáu tr∆∞·ªõc trong tab **Nh·∫≠p d·ªØ li·ªáu**.")
    else:
        data = st.session_state["input_data"]

        st.write("### Th√¥ng tin ƒë√£ nh·∫≠p:")
        st.json(data)

        # Chu·∫©n b·ªã d·ªØ li·ªáu cho model
        input_df = pd.DataFrame([data])

        # G·ªçi model ƒë·ªÉ d·ª± ƒëo√°n
        prediction = model.predict(input_df)[0]

        st.write("### üîÆ D·ª± ƒëo√°n")
        st.success(f"K·∫øt qu·∫£ d·ª± ƒëo√°n: **{prediction}**")

        # ================= Th·ªëng k√™ bi·ªÉu ƒë·ªì =================
        st.write("### üìä ƒê√°nh gi√° th√†nh ph·∫ßn dinh d∆∞·ª°ng")

        # Ng∆∞·ª°ng tham kh·∫£o (c√≥ th·ªÉ ch·ªânh l·∫°i cho h·ª£p l√Ω)
        thresholds = {
            "Calories (kcal)": (400, 700),
            "Protein (g)": (10, 35),  # %
            "Carbohydrates (g)": (45, 65),  # %
            "Fat (g)": (20, 35),  # %
            "Fiber (g)": (8, 10),  # g
            "Sugars (g)": (0, 25),  # g < 25
            "Sodium (mg)": (0, 2000)  # mg < 2000
        }

        nutrients = list(data.keys())
        values = list(data.values())
        colors = []

        for nut, val in data.items():
            low, high = thresholds.get(nut, (0, float("inf")))
            if low <= val <= high:
                colors.append("dodgerblue")  # ƒë·∫°t
            else:
                colors.append("red")  # kh√¥ng ƒë·∫°t

        fig, ax = plt.subplots()
        ax.bar(nutrients, values, color=colors)
        plt.xticks(rotation=45, ha="right")
        plt.ylabel("Gi√° tr·ªã")
        plt.title("ƒê√°nh gi√° th√†nh ph·∫ßn dinh d∆∞·ª°ng")
        st.pyplot(fig)

# =============================
# Footer
# =============================
st.markdown('<div class="footer">¬© 2025 Food Nutrition ML Demo | Built with ‚ù§Ô∏è by Streamlit</div>', unsafe_allow_html=True)
